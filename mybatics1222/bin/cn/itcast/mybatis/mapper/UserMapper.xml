<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- nameSpace，作用是对ＳＱＬ分类化管理，理解ＳＱＬ隔离 
注意　使用Mapper代理方法开发，命名空间有特殊重要的作用
-->

<mapper namespace="cn.itcast.mybatis.mapper.UserMapper">
	<!-- 定义resultMap 将SELECT uid uid_,loginname loginname_ FROM t_user 和t_user类建立映射关系 ,其他文件可以加namespace使用
	将t_userResultMap写到其他查询的　resultType　中就可以
	type:java对象
	id:对应resultMap唯一标识-->
	<resultMap type="t_user" id="t_userResultMap">
	<!--id 主键 column 列名　property pojo中属性名 -->
	<id column="uid_" property="uid"/>
	<!-- result 其他列 -->
	<result column="loginname_" property="loginname"/>
	</resultMap>
	<!-- 用户信息综合查询 -->
	<select id="findT_userList" parameterType="T_userQueryVo" resultType="T_userCustom" >
	<!-- 表达式中的userCustom来自于T_userQueryVo类中的自定义成员userCustom，而userCustom又是继承了t_user的T_userCustom-->
	SELECT * FROM t_user WHERE t_user.uid=#{userCustom.uid} AND t_user.loginname LIKE '%${userCustom.loginname}%' 
	</select>
	<!--  在映射文件中配置很多ＳＱＬ语句 -->
	<!--  通过ＳＥＬＥＣＴ执行数据库查询
	id：表示映射文件的ＳＱＬ，称为statement的id,将SQL语句封装到mapperＳtatement对象中
	parameterType:指定输入参数的类型
	＃｛｝是一个占位符　中间的UID表示输入参数为string类型,参数名称任意起，这里起名UID
	resultType是查询结果类型,这里映射为JAVA对象,可以拷贝对应POJO类的 Name
	
	 -->
	 <!--  下面那里要严格缩进，隔开一个空格，不然报错 -->
	<select id="findUserByUid" parameterType="String" resultMap="t_userResultMap" >
	   SELECT * FROM t_user WHERE uid=#{uid}
	 </select>
	 <!--  结果可能返回多条的查询可用List（怪不得集合这么重要，大部分时候都是在返回list吧）模糊查询加 % 
	 "%${value}%" 中的$表示拼接字符串　为防止引起sql注入，它应当只接收value变量，不接收简单类型，因此不建议用　-->
	<!-- 添加用户，使用pojo对象 -->
	<insert id="insertTuser" parameterType="t_user">
	<!-- 可设置主键, 用SELECT LAST_INSERT_ID()获得自增主键 -->
		<selectKey keyProperty="uid" order="BEFORE" resultType="java.lang.String" >
		SELECT uuid()
		</selectKey>
		INSERT INTO t_user(uid,loginname,loginpass,email,status,activationCode) value(#{uid},#{loginname},#{loginpass},#{email},#{status},#{activationCode})
	</insert>
	
	<!-- 用户信息综合查询,并且分页 -->
	<select id="findT_userCount" parameterType="T_userQueryVo" resultType="int">
	<!-- 表达式中的userCustom来自于T_userQueryVo类中的自定义成员userCustom，而userCustom又是继承了t_user的T_userCustom-->
SELECT count(*) FROM t_user WHERE  t_user.uid LIKE '%${userCustom.uid}%' 
<!--  <where>
	<if test="userCustom!=null">
		<if test="userCustom.uid!=null and userCustom.uid!=' '">
			and t_user.uid=#{userCustom.uid}
		</if>
		<if test="t_user.loginname!=null and t_user.loginname!=' '">
		and	t_user.loginname LIKE '%${userCustom.loginname}%
		</if>
	</if>
</where> -->

	</select>
</mapper>